<div class="page-header d-print-none">
    <div class="container-xl">
        <div class="row g-2 align-items-center">
            <div class="col">
                <h2 class="page-title">
                    <i class="ti ti-gamepad me-2"></i>
                    Game Học Từ Vựng
                </h2>
                <div class="text-muted mt-1">
                    Luyện tập từ vựng tiếng Nhật qua trò chơi tương tác
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-xl py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Start Screen -->
            <div class="card card-lg border-0 shadow-sm rounded-4 mt-5" id="startScreen">
                <div class="card-body text-center py-5">
                    <input type="hidden" id="userId" value="<%= user.id %>">
                    <div class="display-3 mb-4" style="color:#e53935;"><i class="ti ti-book"></i></div>
                    <h2 class="mb-3 fw-bold">Game Từ vựng</h2>
                    <p class="text-muted mb-4">Luyện tập từ vựng tiếng Nhật qua trò chơi tương tác</p>
                    <div class="row mb-3">
                        <div class="col-md-6 offset-md-3 mb-2">
                            <select class="form-select form-select-lg" id="lessonSelect">
                                <option value="">Chọn bài học...</option>
                            </select>
                        </div>
                    </div>
                    <button class="btn btn-danger btn-lg rounded-pill px-5" id="startBtn" disabled>Bắt đầu</button>
                </div>
            </div>

            <!-- Game Screen -->
            <div class="card card-lg border-0 shadow-sm rounded-4 mt-3" id="gameScreen" style="display: none;">
                <div class="card-body">
                    <!-- HP, Combo, Điểm, Level, Thời gian -->
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div class="fw-bold text-danger" style="font-size:1.2rem;"><i class="ti ti-timer"></i> <span id="totalTimer">--:--</span></div>
                        <div class="fw-bold" style="font-size:1.2rem;">Level: <span id="level">1</span></div>
                        <div class="fw-bold" style="font-size:1.2rem;">Điểm: <span id="score">0</span></div>
                    </div>
                    <div class="d-flex align-items-center mb-2" style="gap:10px;">
                        <span style="font-weight:bold;color:#e53935;font-size:1.1rem;"><i class="ti ti-heart-filled"></i> HP</span>
                        <div class="progress flex-grow-1" style="height: 22px; background:#ffeaea;">
                            <div id="hpBar" class="progress-bar bg-danger" role="progressbar" style="width: 100%; font-weight:bold; font-size:1.1rem;" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><span id="hp">100</span></div>
                        </div>
                    </div>
                    <div class="text-center mb-2">
                        <span id="comboDisplay" class="fw-bold" style="font-size:1.3rem; color:#e53935; display:none;">Combo x1</span>
                    </div>
                    <!-- Câu hỏi và đáp án -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="card border-0">
                                <div class="card-body text-center p-4">
                                    <div class="display-1 mb-2" id="currentQuestion" style="font-size: 3rem; min-height: 70px;"></div>
                                    <div class="d-flex justify-content-center align-items-center mb-2">
                                        <span class="badge bg-danger text-white" id="questionTimer" style="font-size:1.1rem;">--s</span>
                                    </div>
                                    <div class="alert alert-info mt-2" id="answerAlert" style="display: none;">
                                        Đáp án đúng là: <strong id="correctAnswer"></strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Đáp án trắc nghiệm -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="d-grid gap-3" id="choicesContainer"></div>
                        </div>
                    </div>
                    <!-- Controls -->
                    <div class="row">
                        <div class="col text-center">
                            <button class="btn btn-outline-danger rounded-pill px-4" id="stopBtn" disabled>Dừng</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Popup tổng kết và hiệu ứng hoa -->
            <div id="endGameModal" class="modal fade" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content text-center p-4 position-relative">
                        <div id="confettiContainer" style="position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:2;"></div>
                        <h3 class="fw-bold mb-3" id="endGameTitle"></h3>
                        <div class="mb-2">Điểm: <span class="fw-bold text-danger" id="endGameScore"></span></div>
                        <div class="mb-2">Level: <span class="fw-bold" id="endGameLevel"></span></div>
                        <div class="mb-2">Combo cao nhất: <span class="fw-bold text-primary" id="endGameCombo"></span></div>
                        <div class="mb-2">Đúng: <span class="fw-bold text-success" id="endGameCorrect"></span></div>
                        <div class="mb-2">Sai: <span class="fw-bold text-danger" id="endGameWrong"></span></div>
                        <div class="mb-2">Tỷ lệ đúng: <span class="fw-bold" id="endGameAccuracy"></span></div>
                        <button class="btn btn-danger rounded-pill mt-3 px-4" onclick="restartGame()">Chơi lại</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // --- Lấy danh sách bài học từ API khi load trang ---
    $(document).ready(function () {
        $.get('/api/game/vocabulary/lessons', function (data) {
            const $lessonSelect = $('#lessonSelect');
            $lessonSelect.empty().append('<option value="">Chọn bài học...</option>');
            data.forEach(lesson => {
                $lessonSelect.append(`<option value="${lesson.lesson}">${lesson.name}</option>`);
            });
        });

        $('#lessonSelect').change(function () {
            $('#startBtn').prop('disabled', !$(this).val());
        });
    });

    // --- Game State ---
    let gameState = {
        questions: [], // [{question, answer, choices, mode}]
        currentIndex: 0,
        score: 0,
        correctCount: 0,
        wrongCount: 0,
        isPlaying: false,
        totalTime: 300,
        totalTimerInterval: null,
        questionTime: 20,
        questionTimerInterval: null,
        currentLevel: 1,
        combo: 1,
        maxCombo: 1,
        hp: 100,
        hpMax: 100,
        comboToLevelUp: 5,
        numQuestions: 10
    };

    function updateStats() {
        $('#score').text(gameState.score);
        $('#level').text(gameState.currentLevel);
        $('#hp').text(gameState.hp);
        $('#hpBar').css('width', gameState.hp + '%').attr('aria-valuenow', gameState.hp);
        if (gameState.combo > 1) {
            $('#comboDisplay').text('Combo x' + gameState.combo).fadeIn(100).addClass('combo-animate');
        } else {
            $('#comboDisplay').fadeOut(100).removeClass('combo-animate');
        }
    }

    function formatTime(sec) {
        const m = Math.floor(sec / 60).toString().padStart(2, '0');
        const s = (sec % 60).toString().padStart(2, '0');
        return `${m}:${s}`;
    }

    function startTotalTimer() {
        $('#totalTimer').text(formatTime(gameState.totalTime));
        gameState.totalTimerInterval = setInterval(() => {
            gameState.totalTime--;
            $('#totalTimer').text(formatTime(gameState.totalTime));
            if (gameState.totalTime <= 0 || gameState.hp <= 0) {
                clearInterval(gameState.totalTimerInterval);
                stopGame();
            }
        }, 1000);
    }

    function startQuestionTimer() {
        let t = gameState.questionTime;
        $('#questionTimer').text(t + 's');
        if (gameState.questionTimerInterval) clearInterval(gameState.questionTimerInterval);
        gameState.questionTimerInterval = setInterval(() => {
            t--;
            $('#questionTimer').text(t + 's');
            if (t <= 0) {
                clearInterval(gameState.questionTimerInterval);
                handleWrongAnswer(true);
            }
        }, 1000);
    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    // --- Sinh bộ đề random ---
    async function generateQuestions(lesson, numQuestions) {
        // Lấy toàn bộ từ vựng của bài
        const res = await $.get(`/api/game/vocabulary/vocabulary/${lesson}`);
        let vocabList = res;
        shuffleArray(vocabList);
        if (numQuestions > vocabList.length) numQuestions = vocabList.length;
        const questions = [];
        for (let i = 0; i < numQuestions; i++) {
            const vocab = vocabList[i];
            // Random mode cho từng câu
            const mode = Math.random() < 0.5 ? 'jp2vi' : 'vi2jp';
            let question, answer, choices;
            if (mode === 'jp2vi') {
                question = vocab.word;
                answer = vocab.meaning;
                // Lấy 3 đáp án sai
                const wrongs = vocabList.filter(v => v.meaning !== answer).slice(0, 3).map(v => v.meaning);
                choices = shuffleArray([answer, ...wrongs]) || [answer, ...wrongs];
            } else {
                question = vocab.meaning;
                answer = vocab.word;
                const wrongs = vocabList.filter(v => v.word !== answer).slice(0, 3).map(v => v.word);
                choices = shuffleArray([answer, ...wrongs]) || [answer, ...wrongs];
            }
            questions.push({question, answer, choices, mode});
        }
        return questions;
    }

    // --- Bắt đầu game ---
    $('#startBtn').click(async function () {
        const lesson = $('#lessonSelect').val();
        if (!lesson) return;
        // Random số câu hỏi (5-20)
        let numQuestions = Math.floor(Math.random() * 16) + 5;
        gameState.numQuestions = numQuestions;
        gameState.questions = await generateQuestions(lesson, numQuestions);
        gameState.currentIndex = 0;
        gameState.score = 0;
        gameState.correctCount = 0;
        gameState.wrongCount = 0;
        gameState.totalTime = 300;
        gameState.currentLevel = 1;
        gameState.combo = 1;
        gameState.maxCombo = 1;
        gameState.hp = 100;
        updateStats();
        $('#startScreen').fadeOut(200, function () {
            $('#gameScreen').fadeIn(200);
        });
        $('#startBtn').prop('disabled', true);
        $('#stopBtn').prop('disabled', false);
        $('#answerAlert').hide();
        startTotalTimer();
        showQuestion();
    });

    $('#stopBtn').click(stopGame);

    function showQuestion() {
        if (gameState.currentIndex >= gameState.questions.length) {
            stopGame();
            return;
        }
        const q = gameState.questions[gameState.currentIndex];
        $('#currentQuestion').text(q.question);
        $('#answerAlert').hide();
        // Hiển thị đáp án trắc nghiệm
        const html = q.choices.map(choice => `<button class="btn btn-outline-primary btn-lg" onclick="checkAnswer('${choice.replace(/'/g, '\'')}')">${choice}</button>`).join('');
        $('#choicesContainer').html(html);
        startQuestionTimer();
    }

    let justLostCombo = false;
    function checkAnswer(selectedAnswer) {
        // Kiểm tra xem còn câu hỏi không
        if (!gameState.questions[gameState.currentIndex]) {
            stopGame();
            return;
        }

        const q = gameState.questions[gameState.currentIndex];
        if (selectedAnswer === q.answer) {
            gameState.combo++;
            if (gameState.combo > gameState.maxCombo) gameState.maxCombo = gameState.combo;
            let point = 10 * gameState.combo;
            gameState.score += point;
            gameState.correctCount++;
            gameState.hp = Math.min(gameState.hp + 5 * gameState.combo, gameState.hpMax);
            if (gameState.correctCount % gameState.comboToLevelUp === 0) {
                gameState.currentLevel++;
                gameState.questionTime = Math.max(5, 20 - (gameState.currentLevel - 1) * 2);
                $('#level').addClass('text-success');
                setTimeout(() => {$('#level').removeClass('text-success');}, 800);
            }
            updateStats();
            $('#answerAlert').hide();
            if (gameState.questionTimerInterval) clearInterval(gameState.questionTimerInterval);
            launchMiniConfetti();
            gameState.currentIndex++;
            setTimeout(showQuestion, 400);
        } else {
            if (gameState.combo > 1) {
                gameState.combo = 1;
                justLostCombo = true;
            } else {
                let hpLost = 10;
                gameState.hp = Math.max(0, gameState.hp - hpLost);
                justLostCombo = false;
            }
            gameState.wrongCount++;
            updateStats();
            $('#correctAnswer').text(q.answer);
            $('#answerAlert').show();
            showSadFace();
            $('#hpBar').addClass('bg-warning');
            if (gameState.questionTimerInterval) clearInterval(gameState.questionTimerInterval);
            setTimeout(() => {$('#hpBar').removeClass('bg-warning');}, 500);
            setTimeout(() => {
                gameState.currentIndex++;
                showQuestion();
            }, 1200);
        }
    }

    function showSadFace() {
        $('#currentQuestion').html('<span style="font-size:3rem;">😢</span>');
        setTimeout(() => {
            if (gameState.questions[gameState.currentIndex]) {
                $('#currentQuestion').text(gameState.questions[gameState.currentIndex].question);
            }
        }, 700);
    }

    function launchMiniConfetti() {
        const charBox = document.getElementById('currentQuestion');
        if (!charBox) return;
        const rect = charBox.getBoundingClientRect();
        for (let i = 0; i < 18; i++) {
            const conf = document.createElement('span');
            conf.className = 'confetti mini';
            conf.style.left = (rect.width / 2 + Math.random() * 40 - 20) + 'px';
            conf.style.top = (rect.height / 2 + Math.random() * 20 - 10) + 'px';
            conf.style.background = `hsl(${Math.random() * 360},90%,60%)`;
            conf.style.animationDelay = (Math.random() * 0.3) + 's';
            charBox.appendChild(conf);
            setTimeout(() => {conf.remove();}, 1200);
        }
    }

    function stopGame() {
        gameState.isPlaying = false;
        if (gameState.totalTimerInterval) clearInterval(gameState.totalTimerInterval);
        if (gameState.questionTimerInterval) clearInterval(gameState.questionTimerInterval);

        // Gửi điểm lên server
        saveScore();

        // Kiểm tra thua
        let win = gameState.hp > 0;

        // Hiển thị modal tổng kết
        showEndGameModal(win);

        // Ẩn màn hình game sau khi hiện modal
        setTimeout(() => {
            $('#gameScreen').fadeOut(200, function () {
                $('#startScreen').fadeIn(200);
            });
            $('#startBtn').prop('disabled', false);
            $('#stopBtn').prop('disabled', true);
        }, 500);
    }

    function showEndGameModal(win) {
        // Tính tỷ lệ đúng
        const total = gameState.correctCount + gameState.wrongCount;
        const accuracy = total > 0 ? Math.round((gameState.correctCount / total) * 100) : 0;

        // Hiển thị thông tin
        $('#endGameTitle').text(win ? 'Chúc mừng! Bạn đã hoàn thành!' : 'Game Over!');
        $('#endGameScore').text(gameState.score);
        $('#endGameLevel').text(gameState.currentLevel);
        $('#endGameCombo').text(gameState.maxCombo);
        $('#endGameCorrect').text(gameState.correctCount);
        $('#endGameWrong').text(gameState.wrongCount);
        $('#endGameAccuracy').text(accuracy + '%');

        // Hiệu ứng hoa nếu thắng
        if (win) {
            launchConfetti();
        }

        // Hiển thị modal
        $('#endGameModal').modal({
            backdrop: 'static',
            keyboard: false
        });
        $('#endGameModal').modal('show');
    }

    function launchConfetti() {
        const container = document.getElementById('confettiContainer');
        container.innerHTML = '';
        for (let i = 0; i < 60; i++) {
            const conf = document.createElement('span');
            conf.className = 'confetti';
            conf.style.left = Math.random() * 100 + '%';
            conf.style.background = `hsl(${Math.random() * 360},90%,60%)`;
            conf.style.animationDelay = (Math.random() * 0.7) + 's';
            container.appendChild(conf);
        }
        setTimeout(() => {container.innerHTML = '';}, 3000);
    }

    function restartGame() {
        $('#endGameModal').modal('hide');
        setTimeout(() => {
            $('#startScreen').fadeIn(200);
        }, 400);
    }

    // --- Gửi điểm lên server ---
    function saveScore() {
        $.post('/games/save-score', {
            gameType: 'vocabulary',
            score: gameState.score,
            correctAnswers: gameState.correctCount,
            wrongAnswers: gameState.wrongCount,
            maxCombo: gameState.maxCombo,
            level: gameState.currentLevel
        })
            .done(function (response) {
                if (response.success) {
                    console.log('Điểm đã được lưu thành công');
                } else {
                    console.error('Lỗi khi lưu điểm:', response.error);
                }
            })
            .fail(function (jqXHR, textStatus, errorThrown) {
                console.error('Lỗi khi gửi điểm:', textStatus, errorThrown);
            });
    }
</script>

<style>
    .combo-animate {
        animation: comboPop 0.4s;
    }

    @keyframes comboPop {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.3);
            color: #ff9800;
        }

        100% {
            transform: scale(1);
        }
    }

    .confetti.mini {
        width: 7px;
        height: 12px;
        border-radius: 2px;
        opacity: 0.85;
        animation: confettiDropMini 0.9s cubic-bezier(.62, .09, .36, 1.01) forwards;
        z-index: 10;
    }

    @keyframes confettiDropMini {
        to {
            transform: translateY(40px) rotate(360deg);
            opacity: 0.7;
        }
    }

    .confetti {
        width: 10px;
        height: 20px;
        border-radius: 3px;
        opacity: 0.85;
        animation: confettiDrop 1.2s cubic-bezier(.62, .09, .36, 1.01) forwards;
        z-index: 10;
    }

    @keyframes confettiDrop {
        to {
            transform: translateY(100px) rotate(360deg);
            opacity: 0.7;
        }
    }

    .modal-content {
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .modal-content h3 {
        color: #e53935;
    }

    #endGameScore {
        font-size: 1.5rem;
    }

    #endGameModal .btn {
        font-weight: bold;
        padding: 10px 30px;
        transition: all 0.3s;
    }

    #endGameModal .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(229, 57, 53, 0.3);
    }
</style>